/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import org.apache.tools.ant.taskdefs.condition.Os

description = 'Ballerina - SQL Ballerina Generator'

configurations {
    jbalTools
}

dependencies {
    jbalTools("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
    compile project(':sql-native')
}

clean {
    delete "$project.projectDir/target"
}

jar {
    manifest {
        attributes('Implementation-Title': project.name, 'Implementation-Version': project.version)
    }
}

task copyToLib(type: Copy) {
    into "$project.projectDir/lib"
    from configurations.externalJars
}

task unpackJballerinaTools(type: Copy) {
    dependsOn(copyToLib)
    configurations.jbalTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        from zipTree(artifact.getFile())
        into new File("${buildDir}/target")
    }
}

def packageName = "sql"
def packageOrg = "ballerina"
def ballerinaConfigFile = new File("$project.projectDir/Ballerina.toml")
def ballerinaDependencyFile = new File("$project.projectDir/Dependencies.toml")
def artifactBallerinaDocs = file("$project.projectDir/build/docs_parent/")
def artifactCacheParent = file("$project.projectDir/build/cache_parent/")
def artifactLibParent = file("$project.projectDir/build/lib_parent/")
def artifactCodeCoverageReport = file("$project.projectDir/target/cache/tests_cache/coverage/ballerina.exec")
def tomlVersion = project.version.split("-")[0].toString()
def ballerinaCentralAccessToken = System.getenv('BALLERINA_CENTRAL_ACCESS_TOKEN')
def distributionPath =  project.projectDir.absolutePath + "/build/target/jballerina-tools-${ballerinaLangVersion}"
def distributionBinPath = distributionPath + "/bin"
def originalConfig = ballerinaConfigFile.text
def originalDependencies = ballerinaDependencyFile.text

task unpackStdLibs() {
    dependsOn(unpackJballerinaTools)
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${buildDir}/target", artifact.name + "-zip")
            }
        }
    }
}

task copyStdlibs(type: Copy) {
    dependsOn(unpackStdLibs)

    into distributionPath
    /* Standard Libraries */
    configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        def artifactExtractedPath = "${buildDir}/target/" + artifact.name + "-zip"
        into("repo/balo") {
            from "${artifactExtractedPath}/balo/"
        }
        into("repo/cache") {
            from "${artifactExtractedPath}/cache"
        }
    }
}

task updateTomlFile {
    doLast {
        def stdlibDependentIoVersion = project.stdlibIoVersion.split('-')[0].toString()
        def stdlibTimeVersion = project.stdlibTimeVersion.split("-")[0].toString()

        def newConfig = ballerinaConfigFile.text.replace("@project.version@", project.version.toString())
        newConfig = newConfig.replace("@toml.version@", tomlVersion)
        newConfig = newConfig.replace("@project.path@", distributionPath)

        ballerinaConfigFile.text = newConfig

        def newDependencyConfig = ballerinaDependencyFile.text.replace("@stdlib.io.version@", stdlibDependentIoVersion)
        newDependencyConfig = newDependencyConfig.replace("@stdlib.time.version@", stdlibTimeVersion)
        ballerinaDependencyFile.text = newDependencyConfig
    }
}

task revertTomlFile {
    doLast {
        ballerinaConfigFile.text = originalConfig
        ballerinaDependencyFile.text = originalDependencies
    }
}

assemble {
    dependsOn(copyStdlibs)
    dependsOn(":sql-native:build")
}

def groupParams = ""
def disableGroups = ""
def debugParams = ""
def balJavaDebugParam = ""

task initializeVariables {
    if (project.hasProperty("groups")) {
        groupParams = "--groups ${project.findProperty("groups")}"
    }
    if (project.hasProperty("disable")) {
        disableGroups = "--disable-groups ${project.findProperty("disable")}"
    }
    if (project.hasProperty("debug")) {
        debugParams = "--debug ${project.findProperty("debug")}"
    }
    if (project.hasProperty("balJavaDebug")) {
        balJavaDebugParam = "BAL_JAVA_DEBUG=${project.findProperty("balJavaDebug")}"
    }
}

task ballerinaTest {
    dependsOn(assemble)
    dependsOn(updateTomlFile)
    dependsOn(initializeVariables)
    finalizedBy(revertTomlFile)

    doLast {
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            environment "STDLIB_VERSION", tomlVersion
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$balJavaDebugParam $distributionBinPath/bal.bat test --code-coverage --includes=* ${groupParams} ${disableGroups} ${debugParams} && exit %%ERRORLEVEL%%"
            } else {
                commandLine 'sh', '-c', "$balJavaDebugParam $distributionBinPath/bal test --code-coverage --includes=* ${groupParams} ${disableGroups} ${debugParams}"
            }
        }
    }
}

test {
    dependsOn(ballerinaTest)
}

task ballerinaBuild {
    mustRunAfter(test)
    dependsOn(assemble)
    dependsOn(updateTomlFile)
    dependsOn(initializeVariables)
    finalizedBy(revertTomlFile)

    inputs.dir file(project.projectDir)

    def testParams = "--skip-tests"
    gradle.taskGraph.whenReady { graph ->
        if (graph.hasTask(':sql-ballerina:build') || graph.hasTask(':sql-ballerina:publish')) {
            ballerinaTest.enabled = false
        }
        if (graph.hasTask(':sql-ballerina:test')) {
            testParams = "--code-coverage --includes=*"
        }
    }

    doLast {
        // Build and populate caches
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            environment "STDLIB_VERSION", tomlVersion
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                //commandLine 'cmd', '/c', "$distributionBinPath/bal.bat build --skip-tests -c && exit %%ERRORLEVEL%%"
                commandLine 'cmd', '/c', "$balJavaDebugParam $distributionBinPath/bal.bat build ${testParams} ${debugParams} && exit %%ERRORLEVEL%%"
            } else {
                //commandLine 'sh', '-c', "$distributionBinPath/bal build --skip-tests -c"
                commandLine 'sh', '-c', "$balJavaDebugParam $distributionBinPath/bal build ${testParams} ${debugParams}"
            }
        }
        copy {
            from file("$project.projectDir/target/balo")
            into file("$artifactCacheParent/balo/${packageOrg}/${packageName}/${tomlVersion}")
        }
        copy {
            from file("$project.projectDir/target/cache")
            exclude '**/*-testable.jar'
            exclude '**/tests_cache/'
            into file("$artifactCacheParent/cache/")
        }

        // Doc creation and packing
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$distributionBinPath/bal.bat doc && exit %%ERRORLEVEL%%"
            } else {
                commandLine 'sh', '-c', "$distributionBinPath/bal doc"
            }
        }
        copy {
            from file("$project.projectDir/target/apidocs/${packageName}")
            into file("$project.projectDir/build/docs_parent/docs/${packageName}")
        }
    }

    outputs.dir artifactCacheParent
    outputs.dir artifactBallerinaDocs
    outputs.dir artifactLibParent
}

build {
    dependsOn(ballerinaBuild)
}

task ballerinaPush {
    dependsOn(build)
    doLast {
        // Publish to central
        if (!project.hasProperty("publishToCentral")) {
            return
        }

        if (project.version.endsWith('-SNAPSHOT')) {
            throw new GradleException("Stdlib not pushed to central for snapshot version '${project.version}'.")
        } else {
            if (ballerinaCentralAccessToken == null) {
                throw new GradleException("Central push failed invalid access token.")
            }

            println("Publishing to the ballerina central..")
            exec {
                workingDir project.projectDir
                environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine 'cmd', '/c', "$distributionBinPath/bal.bat push && exit %%ERRORLEVEL%%"
                } else {
                    commandLine 'sh', '-c', "$distributionBinPath/bal push"
                }
            }
        }
    }
}

publish {
    dependsOn(ballerinaPush)
}

task createArtifactZip(type: Zip) {
    destinationDirectory = file("$buildDir/distributions")
    from ballerinaBuild
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
            artifact source: artifactCodeCoverageReport, classifier: 'jacoco'
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/module-ballerina-sql")
            credentials {
                username = System.getenv("packageUser")
                password = System.getenv("packagePAT")
            }
        }
    }
}
